local table = require("hp/lang/table")

--------------------------------------------------------------------------------
-- クラスベースなオブジェクト指向を簡単に実現するためのクラスです.<br>
-- クラスの基本的な機能を有します.<br>
-- setmetatableによる継承ではなく、テーブルに展開する事で<br>
-- 継承が多くなった場合でもパフォーマンスが劣化しません.<br>
--
-- カプセル化の仕組みとして、getPrivate、setPrivateを用意しています.<br>
-- この関数を使用すると、外部から隠したい一時変数等をmetatableに隠す事ができます.<br>
-- @class table
-- @name class
--------------------------------------------------------------------------------
local M = {}
setmetatable(M, M)

--------------------------------------------------------------------------------
-- クラス定義関数です.
-- 引数にテーブルを指定する事で多重継承が可能です.
-- @param ... 親テーブルです. 多重継承が可能です.
-- @return class
--------------------------------------------------------------------------------
function M:__call(...)
    local class = table.copy(self)
    for i, super in ipairs({...}) do
        table.copy(super, class)
    end
    class.__call = nil
    return class
end

--------------------------------------------------------------------------------
-- コンストラクタ関数です.
-- デフォルトではテーブルを生成して、メタテーブルによる参照を設定します.
-- @return インスタンス
--------------------------------------------------------------------------------
function M:new(...)
    local obj = {__index = self}
    setmetatable(obj, obj)
    
    if obj.init then
        obj:init(...)
    end

    obj.new = nil
    obj.init = nil
    
    return obj
end

--------------------------------------------------------------------------------
-- metatableからプライベートな変数の一覧を返します.<br>
-- 擬似的に変数をカプセル化してします.<br>
-- この関数はクラス内から使用する事を目的とする為、
-- 基本的に外部から呼ばないでください.
--------------------------------------------------------------------------------
function M:getPrivates()
    local mt = getmetatable(self)
    mt.__privates = mt.__privates or {}
    return mt.__privates
end

--------------------------------------------------------------------------------
-- metatableからプライベートな変数を返します.<br>
-- 擬似的に変数をカプセル化してします.<br>
-- この関数はクラス内から使用する事を目的とする為、
-- 基本的に外部から呼ばないでください.
--------------------------------------------------------------------------------
function M:getPrivate(name)
    local mt = getmetatable(self)
    mt.__privates = mt.__privates or {}
    return mt.__privates[name]
end

--------------------------------------------------------------------------------
-- metatableからプライベートな変数を設定します.<br>
-- 擬似的に変数をカプセル化してします.<br>
-- この関数はクラス内から使用する事を目的とする為、
-- 基本的に外部から呼ばないでください.
--------------------------------------------------------------------------------
function M:setPrivate(name, value)
    local mt = getmetatable(self)
    mt.__privates = mt.__privates or {}
    mt.__privates[name] = value
end

return M
